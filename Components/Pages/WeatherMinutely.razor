@page "/weather/minutely"
@inject HttpClient Http
@using Instrukcja.Model

<h1>Minutely Weather Forecast</h1>

@if (weatherData != null && weatherData.Minutely.Any())
{
    foreach (var minute in weatherData.Minutely)
    {
        <p>@FormatDate(minute.Dt): Precipitation: @minute.Precipitation</p>
    }
}
else
{
    <p>Loading minutely weather data...</p>
}

@code {
    public WeatherResponse weatherData;

    protected override async Task OnInitializedAsync()
    {
        await LoadMinutelyWeather();
    }

    private async Task LoadMinutelyWeather()
    {
        try
        {
            var url = "https://api.openweathermap.org/data/3.0/onecall?lat=52.2297&lon=21.0122&appid=84c28f5c4cc0e8e22f5c365f20443e98&exclude=hourly,daily,current,alerts";
            weatherData = await Http.GetFromJsonAsync<WeatherResponse>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private string FormatTemperature(double kelvin)
    {
        return (kelvin - 273.15).ToString("N2");
    }

    private string FormatDate(long unixDateTime)
    {
        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(unixDateTime);
        return dateTimeOffset.LocalDateTime.ToString("g"); 
    }
}
