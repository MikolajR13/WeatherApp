@page "/weather/daily"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Blazorise.Charts
@using Blazorise.DataGrid
@using Blazorise.Components
@using Instrukcja.Model
@using Instrukcja.Services


@if (weatherData != null && weatherData.Daily.Any()) //TU SIĘ DZIEJE MNIEJ WIĘCEJ TO SAMO CO W Weather.razor
{
    <Card>
        <CardHeader>
            Daily Weather Forecast
        </CardHeader>
        <CardBody>
            <BarChart TItem="double" TLabel="string" @ref="barChart"/>
        </CardBody>
    </Card>
    <Divider/>
}
else
{
    <p>Loading daily weather data chart...</p>
}

@if (dailyTempData != null && dailyTempData.Any())
{
    <Card>
        <CardHeader>
			Temperature Daily Data
        </CardHeader>
        <CardBody>
            <DataGrid TItem="Temperature" Data="@dailyTempData" Striped>
                <DataGridColumn Field="@nameof(Temperature.Day)" Caption="Day Temperature [°C]">
                </DataGridColumn>
                <DataGridColumn Field="@nameof(Temperature.Min)" Caption="Min. Temperature [°C]">
                </DataGridColumn>
                <DataGridColumn Field="@nameof(Temperature.Max)" Caption="Max. Temperature [°C]">
                </DataGridColumn>
                <DataGridColumn Field="@nameof(Temperature.Morn)" Caption="Morning Temperature [°C]">
                </DataGridColumn>
                <DataGridColumn Field="@nameof(Temperature.Eve)" Caption="Evening Temperature [°C]">
                </DataGridColumn>
                <DataGridColumn Field="@nameof(Temperature.Night)" Caption="Night Temperature [°C]">
                </DataGridColumn>
            </DataGrid>
        </CardBody>
    </Card>
    <Divider />
} else
{
    <p>Loading daily temperature data table...</p>
}

@if (dailyWeatherData != null && dailyWeatherData.Any())
{
    <Card>
        <CardHeader>
			Complex Daily Weather Data
        </CardHeader>
        <CardBody>
            <DataGrid TItem="WeatherDaily" Data="@dailyWeatherData" Striped>
                <DataGridColumn Field="@nameof(WeatherDaily.Dt)" Caption="Date">
                    <DisplayTemplate>
                        @FormatDate(context.Dt)
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(WeatherDaily.Pressure)" Caption="Pressure [hPa]" />
                <DataGridColumn Field="@nameof(WeatherDaily.Humidity)" Caption="Humidity [%]" />
                <DataGridColumn Field="@nameof(WeatherDaily.Dew_point)" Caption="Dew Point [°C]" />
                <DataGridColumn Field="@nameof(WeatherDaily.Wind_speed)" Caption="Wind Speed [m/s]" />
                <DataGridColumn Field="@nameof(WeatherDaily.Clouds)" Caption="Clouds [%]" />
                <DataGridColumn Field="@nameof(WeatherDaily.Uvi)" Caption="UV Index" />
                <DataGridColumn Field="@nameof(WeatherDaily.Pop)" Caption="Probability of Precipitation [%]">
                    <DisplayTemplate>
                        @FormatPop(context.Pop)
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGrid>
        </CardBody>
    </Card>
}
else
{
    <p>Loading daily weather complex data table...</p>
}

@code {
    public WeatherResponse weatherData;
    public List<Temperature> dailyTempData = new();
    public List<WeatherDaily> dailyWeatherData = new();

    private BarChart<double> barChart = new();
    private List<double> actualTemperatures = new();
    private List<double> feelsLikeTemperatures = new();
    private List<string> dateLabels = new();

    // Kolorki do wykresów, bez list nie chce poprawnie działać
    List<string> backgroundColors = new List<string> {
        ChartColor.FromRgba(255, 99, 132, 0.2f)};
    List<string> backgroundColors2 = new List<string> {
        ChartColor.FromRgba(54, 162, 235, 0.2f)};
    List<string> borderColors = new List<string> {
        ChartColor.FromRgba(255, 99, 132, 1f)};
    List<string> borderColors2 = new List<string> {
        ChartColor.FromRgba(54, 162, 235, 1f)};

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.ContainsKey("lat") && queryParams.ContainsKey("lon"))
        {
            var lat = queryParams["lat"];
            var lon = queryParams["lon"];
            await LoadDailyWeather(lat, lon);
            Console.WriteLine("Data loaded successfully to the program");
        }
        else
        {
            Console.WriteLine("No geo parameters provided in url");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);

            if (queryParams.ContainsKey("lat") && queryParams.ContainsKey("lon"))
            {
                var lat = queryParams["lat"];
                var lon = queryParams["lon"];
                await LoadDailyWeather(lat, lon);
                await HandleRedraw();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("No geo parameters provided in url");
            }
        }
    }

    async Task HandleRedraw()
    {
        if (barChart != null)
        {
            await barChart.Clear();

            await barChart.AddLabelsDatasetsAndUpdate(dateLabels, GetBarChartDataset(), GetBarChartDataset2());
        }
    }

    private async Task LoadDailyWeather(string lat, string lon)
    {
        try
        {
            string apiKey = "84c28f5c4cc0e8e22f5c365f20443e98";
            string url = $"https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&appid={apiKey}&units=metric&exclude=minutely,hourly,current,alerts";
            //var url = "https://api.openweathermap.org/data/3.0/onecall?lat=52.2297&lon=21.0122&appid=84c28f5c4cc0e8e22f5c365f20443e98&exclude=minutely,hourly,current,alerts";
            weatherData = await Http.GetFromJsonAsync<WeatherResponse>(url);

            // Czyszczenie list, aby nie powstały nadmierne dane
            actualTemperatures.Clear();
            feelsLikeTemperatures.Clear();
            dateLabels.Clear();
            dailyTempData.Clear();
            dailyWeatherData.Clear();

            // Ładowanie danych do list
            foreach (var day in weatherData.Daily)
            {
                actualTemperatures.Add(day.Temp.Day);
                feelsLikeTemperatures.Add(day.Feels_like.Day);
                dateLabels.Add(FormatDate(day.Dt)); // Dodawanie dat do jako etykiet wykresu
                dailyTempData.Add(day.Temp); // Dodawanie temperatur do tabeli
                dailyWeatherData.Add(day);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    // Zestaw danych temperatury faktycznej do wykresu
    BarChartDataset<double> GetBarChartDataset()
    {
        return new BarChartDataset<double>
            {
                Label = "Actual Temperature [°C]",
                Data = actualTemperatures,
                BackgroundColor = backgroundColors,
                BorderColor = borderColors
            };
    }
    // Zestaw danych temperatury odczuwalnej do wykresu
    BarChartDataset<double> GetBarChartDataset2()
    {
        return new BarChartDataset<double>
            {
                Label = "Feels-Like Temperature [°C]",
                Data = feelsLikeTemperatures,
                BackgroundColor = backgroundColors2,
                BorderColor = borderColors2
            };
    }

    private string FormatDate(long unixDateTime)
    {
        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(unixDateTime);
        return dateTimeOffset.LocalDateTime.ToString("g"); 
    }

    private string FormatPop(double pop)
    {
        return Math.Round(pop * 100).ToString();
    }
}
