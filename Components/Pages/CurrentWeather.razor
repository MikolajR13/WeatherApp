@page "/weather/current"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Blazorise.Charts
@using Blazorise.DataGrid
@using Blazorise.Components
@using Instrukcja.Model

@if (weatherData != null)
{   
    <h1>Current Weather Details</h1>
    <br/>
    <Card>
        <CardHeader>
            Date: @FormatDate(weatherData.Current.Dt)
        </CardHeader>
        <CardBody>
            <Table FullWidth="true" Striped="true" Bordered="true">
                <TableHeader>
                    <TableHeaderCell>Temperature [°C]</TableHeaderCell>
                    <TableHeaderCell>Feels Like [°C]</TableHeaderCell>
                    <TableHeaderCell>Humidity [%]</TableHeaderCell>
                    <TableHeaderCell>Pressure [hPa]</TableHeaderCell>
                    <TableHeaderCell>Dew Point [°C]</TableHeaderCell>
                    <TableHeaderCell>UV Index</TableHeaderCell>
                    <TableHeaderCell>Clouds [%]</TableHeaderCell>
                    <TableHeaderCell>Visibility [m]</TableHeaderCell>
                    <TableHeaderCell>Wind Speed [m/s]</TableHeaderCell>
                    <TableHeaderCell>Wind Direction [°]</TableHeaderCell>
                    <TableHeaderCell>Wind Gust [m/s]</TableHeaderCell>
                </TableHeader>
                <TableBody>
                    <TableRow>
                        <TableRowCell>@weatherData.Current.Temp</TableRowCell>
                        <TableRowCell>@weatherData.Current.Feels_like</TableRowCell>
                        <TableRowCell>@weatherData.Current.Humidity</TableRowCell>
                        <TableRowCell>@weatherData.Current.Pressure</TableRowCell>
                        <TableRowCell>@weatherData.Current.Dew_point</TableRowCell>
                        <TableRowCell>@weatherData.Current.Uvi</TableRowCell>
                        <TableRowCell>@weatherData.Current.Clouds</TableRowCell>
                        <TableRowCell>@weatherData.Current.Visibility</TableRowCell>
                        <TableRowCell>@weatherData.Current.Wind_speed</TableRowCell>
                        <TableRowCell>@weatherData.Current.Wind_deg</TableRowCell>
                        <TableRowCell>@weatherData.Current.Wind_gust</TableRowCell>
                    </TableRow>
                </TableBody>
            </Table>
        </CardBody>
    </Card>
}
else
{
    <p>Loading current weather data...</p>
}

@code {
    public WeatherResponse weatherData;

    // protected override async Task OnInitializedAsync()
    // {
    //     await LoadCurrentWeather();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);

            if (queryParams.ContainsKey("lat") && queryParams.ContainsKey("lon"))
            {
                var lat = queryParams["lat"];
                var lon = queryParams["lon"];
                await LoadCurrentWeather(lat, lon);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("No geo parameters provided in url");
            }
        }
    }

    private async Task LoadCurrentWeather(string lat, string lon)
    {
        try
        {
            string apiKey = "84c28f5c4cc0e8e22f5c365f20443e98";
            string url = $"https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&appid={apiKey}&units=metric&exclude=minutely,daily,hourly,alerts";
            //var url = "https://api.openweathermap.org/data/3.0/onecall?lat=52.2297&lon=21.0122&appid=84c28f5c4cc0e8e22f5c365f20443e98&exclude=minutely,daily,hourly,alerts";
            weatherData = await Http.GetFromJsonAsync<WeatherResponse>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    
    private string FormatDate(long unixDateTime)
    {
        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(unixDateTime);
        return dateTimeOffset.LocalDateTime.ToString("g");
    }
}
