@page "/weather"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject NavigationManager NavigationManager
@using Instrukcja.Model
@using Instrukcja.Services
@using Microsoft.Data.Sqlite;
@using Blazorise.Charts;
@using Blazorise.Charts.Annotation;
@inject WeatherService WeatherService
@inject ReadDataBaseService ReadData

<h1>Weather Overview</h1>


@if (weatherData != null)
{
    foreach(var day in labels)
    {
        <p>Labels: @day</p>
    }
    foreach(var tem in data)
    {
        <p>Temperature Day: @tem.Day</p>
        <p>Temperature Night: @tem.Night</p>
        <p>Temperature Min: @tem.Min</p>
        <p>Temperature Max: @tem.Max</p>
        <p>Temperature Eve: @tem.Eve</p>
        <p>Temperature Morn: @tem.Morn</p>
    }
}
else
{
    <p>Loading weather data...</p>
}

@code {
    private WeatherResponse weatherData;
    private WeatherDataResult weatherDataResult;
    private LineChart<double> lineChart;
    private LineChartOptions chartOptions;
    private List<WeatherDaily> weatherDailies = new List<WeatherDaily>();
    private List<string> labels;
    private List<Temperature> data;


    public static DateTime UnixTimeStampToDateTime(long unixTimeStamp)
    {
        // Ustawienie punktu początkowego (epoch)
        System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
        // Dodanie liczby sekund
        dtDateTime = dtDateTime.AddSeconds(unixTimeStamp).ToLocalTime();
        return dtDateTime;
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchWeatherDataAsync();
        weatherDataResult = await ReadData.GetLast10WeatherDailiesWithHourliesAsync();
        weatherDailies = weatherDataResult.DailiesData;
        labels = weatherDailies.Select(d => d.DateDaily.ToString()).ToList();
        data = weatherDailies.Select(d => d.Temp).ToList();
        
        

    }

    private async Task<WeatherResponse> FetchWeatherDataAsync()
    {
        try
        {
            var url = "https://api.openweathermap.org/data/3.0/onecall?lat=52.2297&lon=21.0122&appid=84c28f5c4cc0e8e22f5c365f20443e98";
            weatherData = await Http.GetFromJsonAsync<WeatherResponse>(url);
            if (weatherData != null && weatherData.Daily != null && weatherData.Hourly != null)
            {
                foreach( var day in weatherData.Daily)
                {
                    var dateTime = DateTimeOffset.FromUnixTimeSeconds(day.Dt).DateTime.ToLocalTime();
                    day.DateDaily = dateTime.Date;
                    await WeatherService.AddWeatherDailyAsync(day);
                }

                foreach(var hour in weatherData.Hourly)
                {
                    var dateTime = DateTimeOffset.FromUnixTimeSeconds(hour.Dt).DateTime.ToLocalTime();
                    hour.DateHourly = dateTime.Date;
                    hour.Time = dateTime.TimeOfDay;
                    await WeatherService.AddWeatherHourlyAsync(hour);
                }
            }

        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load weather data: {ex.Message}");
        }
        return weatherData;
    }


    private string FormatTemperature(double kelvin)
    {
        return (kelvin - 273.15).ToString("N2");
    }
    public string uri1 = "/weather/current";
    public string uri2 = "/weather/minutely";
    public string uri3 = "/weather/hourly";
    public string uri4 = "/weather/daily";

}
